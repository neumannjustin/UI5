{"!define":{"sap.ui.layout.form.GridElementData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridElementData with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.GridElementData"},"sap.ui.layout.Grid_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.Grid with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.Grid"},"sap.ui.layout.form.Form_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.Form with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.Form"},"sap.ui.layout.Grid":{"getDefaultIndent":{"!description":"Gets current value of property <code>defaultIndent<\/code>.\n\nOptional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nDefault value is <code>XL0 L0 M0 S0<\/code>.","!type":"fn() -> sap.ui.layout.GridIndent","!category":"function"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation named <code>content<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.core.Control) -> Number","!category":"function"},"removeContent":{"!description":"Removes a content from the aggregation named <code>content<\/code>.","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function"},"getPosition":{"!description":"Gets current value of property <code>position<\/code>.\n\nOptional. Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".\n\nDefault value is <code>Left<\/code>.","!type":"fn() -> sap.ui.layout.GridPosition","!category":"function"},"setHSpacing":{"!description":"Sets a new value for property <code>hSpacing<\/code>.\n\nOptional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(fHSpacing: Number) -> sap.ui.layout.Grid","!category":"function"},"getContainerQuery":{"!description":"Gets current value of property <code>containerQuery<\/code>.\n\nIf true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"destroyContent":{"!description":"Destroys all the content in the aggregation\nnamed <code>content<\/code>.","!type":"fn() -> sap.ui.layout.Grid","!category":"function"},"setDefaultSpan":{"!description":"Sets a new value for property <code>defaultSpan<\/code>.\n\nOptional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>XL3 L3 M6 S12<\/code>.","!type":"fn(sDefaultSpan: sap.ui.layout.GridSpan) -> sap.ui.layout.Grid","!category":"function"},"setContainerQuery":{"!description":"Sets a new value for property <code>containerQuery<\/code>.\n\nIf true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bContainerQuery: Boolean) -> sap.ui.layout.Grid","!category":"function"},"!category":"class","getWidth":{"!description":"Gets current value of property <code>width<\/code>.\n\nOptional. Width of the Grid. If not specified, then 100%.\n\nDefault value is <code>100%<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function"},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\n\nOptional. Width of the Grid. If not specified, then 100%.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100%<\/code>.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.Grid","!category":"function"},"addContent":{"!description":"Adds some content into the aggregation named <code>content<\/code>.","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.Grid","!category":"function"},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\n\nControls that are placed into Grid layout.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"removeAllContent":{"!description":"Removes all the controls in the aggregation named <code>content<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"setVSpacing":{"!description":"Sets a new value for property <code>vSpacing<\/code>.\n\nOptional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(fVSpacing: Number) -> sap.ui.layout.Grid","!category":"function"},"setPosition":{"!description":"Sets a new value for property <code>position<\/code>.\n\nOptional. Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Left<\/code>.","!type":"fn(sPosition: sap.ui.layout.GridPosition) -> sap.ui.layout.Grid","!category":"function"},"getHSpacing":{"!description":"Gets current value of property <code>hSpacing<\/code>.\n\nOptional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function"},"getVSpacing":{"!description":"Gets current value of property <code>vSpacing<\/code>.\n\nOptional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function"},"!description":"The Grid control is a layout which positions its child controls in a 12 column flow layout. Its children can be specified to take on a variable amount of columns depending on available screen size. With this control it is possible to achieve flexible layouts and line-breaks for extra large-, large-, medium- and small-sized screens, such as large desktop, desktop, tablet, and mobile. The Grid control's width can be percentage- or pixel-based and the spacing between its columns can be set to various pre-defined values.","insertContent":{"!description":"Inserts a content into the aggregation named <code>content<\/code>.","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.Grid","!category":"function"},"getDefaultSpan":{"!description":"Gets current value of property <code>defaultSpan<\/code>.\n\nOptional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nDefault value is <code>XL3 L3 M6 S12<\/code>.","!type":"fn() -> sap.ui.layout.GridSpan","!category":"function"},"setDefaultIndent":{"!description":"Sets a new value for property <code>defaultIndent<\/code>.\n\nOptional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>XL0 L0 M0 S0<\/code>.","!type":"fn(sDefaultIndent: sap.ui.layout.GridIndent) -> sap.ui.layout.Grid","!category":"function"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.Grid.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"},"!proto":"sap.ui.core.Control"},"sap.ui.layout.VerticalLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.VerticalLayout with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.VerticalLayout"},"sap.ui.layout.form.FormLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormLayout with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.FormLayout"},"sap.ui.layout.form.ResponsiveLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.ResponsiveLayout with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.ResponsiveLayout"},"sap.ui.layout.ResponsiveFlowLayoutData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayoutData with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.ResponsiveFlowLayoutData"},"sap.ui.layout.form.SimpleForm":{"getBreakpointL":{"!description":"Gets current value of property <code>breakpointL<\/code>.\n\nBreakpoint between Medium size and Large size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>1024<\/code>.","!type":"fn() -> Number","!category":"function"},"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named <code>ariaLabelledBy<\/code>.","!type":"fn(vAriaLabelledBy: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function"},"getBreakpointM":{"!description":"Gets current value of property <code>breakpointM<\/code>.\n\nBreakpoint between Small size and Medium size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>600<\/code>.","!type":"fn() -> Number","!category":"function"},"setEditable":{"!description":"Sets a new value for property <code>editable<\/code>.\n\nApplies a device-specific and theme-specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\nThe accessibility aria-readonly attribute is set according to this property.\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(bEditable: Boolean) -> sap.ui.layout.form.SimpleForm","!category":"function"},"getColumnsL":{"!description":"Gets current value of property <code>columnsL<\/code>.\n\nForm columns for large size.\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>2<\/code>.","!type":"fn() -> Number","!category":"function"},"setColumnsM":{"!description":"Sets a new value for property <code>columnsM<\/code>.\n\nForm columns for medium size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(iColumnsM: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"getColumnsM":{"!description":"Gets current value of property <code>columnsM<\/code>.\n\nForm columns for medium size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function"},"setColumnsL":{"!description":"Sets a new value for property <code>columnsL<\/code>.\n\nForm columns for large size.\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>2<\/code>.","!type":"fn(iColumnsL: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"getTitle":{"!description":"Gets content of aggregation <code>title<\/code>.\n\nTitle element of the <code>SimpleForm<\/code>. Can either be a <code>Title<\/code> control, or a string.","!type":"fn() -> sap.ui.core.Title","!category":"function"},"getWidth":{"!description":"Gets current value of property <code>width<\/code>.\n\nWidth of the form.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function"},"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the <code>ariaLabelledBy<\/code> association.\n\nAssociation to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"getEditable":{"!description":"Gets current value of property <code>editable<\/code>.\n\nApplies a device-specific and theme-specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\nThe accessibility aria-readonly attribute is set according to this property.\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.","!type":"fn() -> Boolean","!category":"function"},"addContent":{"!description":"Adds some content into the aggregation named <code>content<\/code>.","!type":"fn(oContent: sap.ui.core.Element) -> sap.ui.layout.form.SimpleForm","!category":"function"},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\n\nThe content of the form is structured in the following way:\n<ul>\n<li>Add a <code>Title<\/code> control to start a new group (<code>FormContainer<\/code>).<\/li>\n<li>Add a <code>Label<\/code> control to start a new row (<code>FormElement<\/code>).<\/li>\n<li>Add controls as input fields, text fields or other as needed.<\/li>\n<li>Use <code>LayoutData<\/code> to influence the layout for special cases in the single controls.\nFor example, if a <code>ResponsiveLayout<\/code> is used as a layout, the form content is weighted using weight 3 for the labels and weight 5 for the fields part. By default the label column is 192 pixels wide.\nIf your input controls should influence their width, you can add <code>sap.ui.layout.ResponsiveFlowLayoutData<\/code> to them via <code>setLayoutData<\/code> method.\nEnsure that the sum of the weights in the <code>ResponsiveFlowLayoutData<\/code> is not more than 5, as this is the total width of the input control part of each form row.<\/li>\n<\/ul>\nExample for a row where the <code>TextField<\/code> takes 4 and the <code>TextView<\/code> takes 1 weight (using <code>ResponsiveLayout<\/code>):\n<pre>\nnew sap.ui.commons.Label({text:\"Label\"});\nnew sap.ui.commons.TextField({value:\"Weight 4\",\nlayoutData:new sap.ui.layout.ResponsiveFlowLayoutData({weight:4})}),\nnew sap.ui.commons.TextView({text:\"Weight 1\",\nlayoutData: new sap.ui.layout.ResponsiveFlowLayoutData({weight:1})}),\n<\/pre>","!type":"fn() -> [sap.ui.core.Element]","!category":"function"},"removeAllContent":{"!description":"Removes all the controls in the aggregation named <code>content<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Element]","!category":"function"},"getMinWidth":{"!description":"Gets current value of property <code>minWidth<\/code>.\n\nThe overall minimum width in pixels that is used for the <code>SimpleForm<\/code>. If the available width is below the given minWidth the SimpleForm will create a new row for the next group (<code>FormContainer<\/code>).\nThe default value is -1, meaning that inner groups (<code>FormContainers<\/code>) will be stacked until maxCols is reached, irrespective of whether a maxWidth is reached or the available parents width is reached.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.\n\nDefault value is <code>-1<\/code>.","!type":"fn() -> Number","!category":"function"},"setBreakpointM":{"!description":"Sets a new value for property <code>breakpointM<\/code>.\n\nBreakpoint between Small size and Medium size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>600<\/code>.","!type":"fn(iBreakpointM: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"setBreakpointL":{"!description":"Sets a new value for property <code>breakpointL<\/code>.\n\nBreakpoint between Medium size and Large size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1024<\/code>.","!type":"fn(iBreakpointL: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"destroyTitle":{"!description":"Destroys the title in the aggregation\nnamed <code>title<\/code>.","!type":"fn() -> sap.ui.layout.form.SimpleForm","!category":"function"},"setMaxContainerCols":{"!description":"Sets a new value for property <code>maxContainerCols<\/code>.\n\nThe maximum amount of groups (<code>FormContainers<\/code>) per row that is used before a new row is started.\n<b>Note:<\/b> If a <code>ResponsiveGridLayout<\/code> is used as a layout, this property is not used. Please use the properties <code>ColumnsL<\/code> and <code>ColumnsM<\/code> in this case.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>2<\/code>.","!type":"fn(iMaxContainerCols: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"getLabelSpanS":{"!description":"Gets current value of property <code>labelSpanS<\/code>.\n\nDefault span for labels in small size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>12<\/code>.","!type":"fn() -> Number","!category":"function"},"addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association named <code>ariaLabelledBy<\/code>.","!type":"fn(vAriaLabelledBy: String | sap.ui.core.Control) -> sap.ui.layout.form.SimpleForm","!category":"function"},"setTitle":{"!description":"Sets the aggregated <code>title<\/code>.","!type":"fn(oTitle: sap.ui.core.Title) -> sap.ui.layout.form.SimpleForm","!category":"function"},"getLabelSpanL":{"!description":"Gets current value of property <code>labelSpanL<\/code>.\n\nDefault span for labels in large size.\nThis span is only used if more than 1 group (<code>FormContainer<\/code>) is in one row. If only 1 group (<code>FormContainer<\/code>) is in the row the <code>labelSpanM<\/code> value is used.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>4<\/code>.","!type":"fn() -> Number","!category":"function"},"getLabelSpanM":{"!description":"Gets current value of property <code>labelSpanM<\/code>.\n\nDefault span for labels in medium size.\nThis property is used for full-size groups (<code>FormContainers<\/code>). If more than one group (<code>FormContainer<\/code>) is in one line, <code>labelSpanL<\/code> is used.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>2<\/code>.","!type":"fn() -> Number","!category":"function"},"!proto":"sap.ui.core.Control","getMaxContainerCols":{"!description":"Gets current value of property <code>maxContainerCols<\/code>.\n\nThe maximum amount of groups (<code>FormContainers<\/code>) per row that is used before a new row is started.\n<b>Note:<\/b> If a <code>ResponsiveGridLayout<\/code> is used as a layout, this property is not used. Please use the properties <code>ColumnsL<\/code> and <code>ColumnsM<\/code> in this case.\n\nDefault value is <code>2<\/code>.","!type":"fn() -> Number","!category":"function"},"setEmptySpanL":{"!description":"Sets a new value for property <code>emptySpanL<\/code>.\n\nNumber of grid cells that are empty at the end of each line on large size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iEmptySpanL: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Element<\/code> in the aggregation named <code>content<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.core.Element) -> Number","!category":"function"},"removeContent":{"!description":"Removes a content from the aggregation named <code>content<\/code>.","!type":"fn(vContent: Number | String | sap.ui.core.Element) -> sap.ui.core.Element","!category":"function"},"setLayout":{"!description":"Sets a new value for property <code>layout<\/code>.\n\nThe <code>FormLayout<\/code> that is used to render the <code>SimpleForm<\/code>.\nWe suggest using the <code>ResponsiveGridLayout<\/code> for rendering a <code>SimpleForm<\/code>, as its responsiveness uses the space available in the best way possible.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>ResponsiveLayout<\/code>.","!type":"fn(sLayout: sap.ui.layout.form.SimpleFormLayout) -> sap.ui.layout.form.SimpleForm","!category":"function"},"setMinWidth":{"!description":"Sets a new value for property <code>minWidth<\/code>.\n\nThe overall minimum width in pixels that is used for the <code>SimpleForm<\/code>. If the available width is below the given minWidth the SimpleForm will create a new row for the next group (<code>FormContainer<\/code>).\nThe default value is -1, meaning that inner groups (<code>FormContainers<\/code>) will be stacked until maxCols is reached, irrespective of whether a maxWidth is reached or the available parents width is reached.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>-1<\/code>.","!type":"fn(iMinWidth: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"setEmptySpanM":{"!description":"Sets a new value for property <code>emptySpanM<\/code>.\n\nNumber of grid cells that are empty at the end of each line on medium size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iEmptySpanM: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"setEmptySpanS":{"!description":"Sets a new value for property <code>emptySpanS<\/code>.\n\nNumber of grid cells that are empty at the end of each line on small size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iEmptySpanS: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"getLabelMinWidth":{"!description":"Gets current value of property <code>labelMinWidth<\/code>.\n\nSpecifies the min-width in pixels of the label in all form containers.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.\n\nDefault value is <code>192<\/code>.","!type":"fn() -> Number","!category":"function"},"destroyContent":{"!description":"Destroys all the content in the aggregation\nnamed <code>content<\/code>.","!type":"fn() -> sap.ui.layout.form.SimpleForm","!category":"function"},"!category":"class","setLabelSpanM":{"!description":"Sets a new value for property <code>labelSpanM<\/code>.\n\nDefault span for labels in medium size.\nThis property is used for full-size groups (<code>FormContainers<\/code>). If more than one group (<code>FormContainer<\/code>) is in one line, <code>labelSpanL<\/code> is used.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>2<\/code>.","!type":"fn(iLabelSpanM: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"setLabelSpanL":{"!description":"Sets a new value for property <code>labelSpanL<\/code>.\n\nDefault span for labels in large size.\nThis span is only used if more than 1 group (<code>FormContainer<\/code>) is in one row. If only 1 group (<code>FormContainer<\/code>) is in the row the <code>labelSpanM<\/code> value is used.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>4<\/code>.","!type":"fn(iLabelSpanL: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\n\nWidth of the form.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.form.SimpleForm","!category":"function"},"setLabelMinWidth":{"!description":"Sets a new value for property <code>labelMinWidth<\/code>.\n\nSpecifies the min-width in pixels of the label in all form containers.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>192<\/code>.","!type":"fn(iLabelMinWidth: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"setLabelSpanS":{"!description":"Sets a new value for property <code>labelSpanS<\/code>.\n\nDefault span for labels in small size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>12<\/code>.","!type":"fn(iLabelSpanS: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"getEmptySpanS":{"!description":"Gets current value of property <code>emptySpanS<\/code>.\n\nNumber of grid cells that are empty at the end of each line on small size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function"},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named <code>ariaLabelledBy<\/code>.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"!description":"The <code>SimpleForm<\/code> provides an easy to use API to create simple forms.\nInside a <code>SimpleForm<\/code>, a <code>Form<\/code> control is created along with its <code>FormContainers<\/code> and <code>FormElements<\/code>, but the complexity in the API is removed.\n<ul>\n<li>A new title starts a new group (<code>FormContainer<\/code>) in the form.<\/li>\n<li>A new label starts a new row (<code>FormElement<\/code>) in the form.<\/li>\n<li>All other controls will be assigned to the row (<code>FormElement<\/code>) started with the last label.<\/li>\n<\/ul>\nUse <code>LayoutData<\/code> to influence the layout for special cases in the Input/Display controls.\n<b>Note:<\/b> If a more complex form is needed, use <code>Form<\/code> instead.","insertContent":{"!description":"Inserts a content into the aggregation named <code>content<\/code>.","!type":"fn(oContent: sap.ui.core.Element, iIndex: Number) -> sap.ui.layout.form.SimpleForm","!category":"function"},"getLayout":{"!description":"Gets current value of property <code>layout<\/code>.\n\nThe <code>FormLayout<\/code> that is used to render the <code>SimpleForm<\/code>.\nWe suggest using the <code>ResponsiveGridLayout<\/code> for rendering a <code>SimpleForm<\/code>, as its responsiveness uses the space available in the best way possible.\n\nDefault value is <code>ResponsiveLayout<\/code>.","!type":"fn() -> sap.ui.layout.form.SimpleFormLayout","!category":"function"},"getEmptySpanM":{"!description":"Gets current value of property <code>emptySpanM<\/code>.\n\nNumber of grid cells that are empty at the end of each line on medium size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function"},"getEmptySpanL":{"!description":"Gets current value of property <code>emptySpanL<\/code>.\n\nNumber of grid cells that are empty at the end of each line on large size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.SimpleForm.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"}},"sap.ui":{"layout":"sap.ui.layout","!category":"namespace"},"sap.ui.layout.form.SimpleForm_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.SimpleForm with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.SimpleForm"},"sap.ui.layout.GridIndent":{"!description":"A string type that represents Grid's indent values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters have to be provided in the order large  medium  small.","!category":"namespace"},"sap.ui.layout.form.ResponsiveGridLayout":{"setEmptySpanL":{"!description":"Sets a new value for property <code>emptySpanL<\/code>.\n\nNumber of grid cells that are empty at the end of each line on large size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iEmptySpanL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function"},"getBreakpointL":{"!description":"Gets current value of property <code>breakpointL<\/code>.\n\nBreakpoint (in pixel) between Medium size and Large size.\n\nDefault value is <code>1024<\/code>.","!type":"fn() -> Number","!category":"function"},"getEmptySpanS":{"!description":"Gets current value of property <code>emptySpanS<\/code>.\n\nNumber of grid cells that are empty at the end of each line on small size.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function"},"getBreakpointM":{"!description":"Gets current value of property <code>breakpointM<\/code>.\n\nBreakpoint (in pixel) between Small size and Medium size.\n\nDefault value is <code>600<\/code>.","!type":"fn() -> Number","!category":"function"},"setBreakpointM":{"!description":"Sets a new value for property <code>breakpointM<\/code>.\n\nBreakpoint (in pixel) between Small size and Medium size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>600<\/code>.","!type":"fn(iBreakpointM: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function"},"setEmptySpanM":{"!description":"Sets a new value for property <code>emptySpanM<\/code>.\n\nNumber of grid cells that are empty at the end of each line on medium size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iEmptySpanM: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function"},"setBreakpointL":{"!description":"Sets a new value for property <code>breakpointL<\/code>.\n\nBreakpoint (in pixel) between Medium size and Large size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1024<\/code>.","!type":"fn(iBreakpointL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function"},"setEmptySpanS":{"!description":"Sets a new value for property <code>emptySpanS<\/code>.\n\nNumber of grid cells that are empty at the end of each line on small size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iEmptySpanS: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function"},"!description":"Renders a <code>Form<\/code> using a responsive grid. Internally the <code>Grid<\/code> control is used for rendering.\nUsing this layout, the <code>Form<\/code> is rendered in a responsive way.\nDepending on the available space, the <code>FormContainers<\/code> are rendered in one or different columns and the labels are rendered in the same row as the fields or above the fields.\nThis behavior can be influenced by the properties of this layout control.\n\nOn the <code>FormContainers<\/code>, labels and content fields, <code>GridData<\/code> can be used to change the default rendering.\n<code>GridData<\/code> is not supported for <code>FormElements<\/code>.\n\n<b>Note:<\/b> If <code>GridData<\/code> is used, this may result in a much more complex layout than the default one.\nThis means that in some cases, the calculation for the other content may not bring the expected result.\nIn such cases, <code>GridData<\/code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used standalone, it only renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code>.","getLabelSpanS":{"!description":"Gets current value of property <code>labelSpanS<\/code>.\n\nDefault span for labels in small size.\n\nDefault value is <code>12<\/code>.","!type":"fn() -> Number","!category":"function"},"setColumnsM":{"!description":"Sets a new value for property <code>columnsM<\/code>.\n\nNumber of columns for medium size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(iColumnsM: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function"},"getColumnsL":{"!description":"Gets current value of property <code>columnsL<\/code>.\n\nNumber of columns for large size.\nThe number of columns for large size must not be smaller than the number of columns for medium size\n\nDefault value is <code>2<\/code>.","!type":"fn() -> Number","!category":"function"},"setColumnsL":{"!description":"Sets a new value for property <code>columnsL<\/code>.\n\nNumber of columns for large size.\nThe number of columns for large size must not be smaller than the number of columns for medium size\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>2<\/code>.","!type":"fn(iColumnsL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function"},"getColumnsM":{"!description":"Gets current value of property <code>columnsM<\/code>.\n\nNumber of columns for medium size.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function"},"setLabelSpanM":{"!description":"Sets a new value for property <code>labelSpanM<\/code>.\n\nDefault span for labels in medium size.\nThis property is used for full-size <code>FormContainers<\/code>. If more than one <code>FormContainer<\/code> is in one line, <code>labelSpanL<\/code> is used.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>2<\/code>.","!type":"fn(iLabelSpanM: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function"},"!category":"class","setLabelSpanL":{"!description":"Sets a new value for property <code>labelSpanL<\/code>.\n\nDefault span for labels in large size.\nThis span is only used if more than 1 <code>FormContainer<\/code> is in one line. If only 1 <code>FormContainer<\/code> is in the line, then the <code>labelSpanM<\/code> value is used.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>4<\/code>.","!type":"fn(iLabelSpanL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function"},"getEmptySpanM":{"!description":"Gets current value of property <code>emptySpanM<\/code>.\n\nNumber of grid cells that are empty at the end of each line on medium size.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function"},"getLabelSpanL":{"!description":"Gets current value of property <code>labelSpanL<\/code>.\n\nDefault span for labels in large size.\nThis span is only used if more than 1 <code>FormContainer<\/code> is in one line. If only 1 <code>FormContainer<\/code> is in the line, then the <code>labelSpanM<\/code> value is used.\n\nDefault value is <code>4<\/code>.","!type":"fn() -> Number","!category":"function"},"getEmptySpanL":{"!description":"Gets current value of property <code>emptySpanL<\/code>.\n\nNumber of grid cells that are empty at the end of each line on large size.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function"},"getLabelSpanM":{"!description":"Gets current value of property <code>labelSpanM<\/code>.\n\nDefault span for labels in medium size.\nThis property is used for full-size <code>FormContainers<\/code>. If more than one <code>FormContainer<\/code> is in one line, <code>labelSpanL<\/code> is used.\n\nDefault value is <code>2<\/code>.","!type":"fn() -> Number","!category":"function"},"setLabelSpanS":{"!description":"Sets a new value for property <code>labelSpanS<\/code>.\n\nDefault span for labels in small size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>12<\/code>.","!type":"fn(iLabelSpanS: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.ResponsiveGridLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"},"!proto":"sap.ui.layout.form.FormLayout"},"sap.ui.layout.form.GridElementData":{"!description":"The <code>GridLayout<\/code>-specific layout data for <code>FormElement<\/code> fields.","setHCells":{"!description":"Sets a new value for property <code>hCells<\/code>.\n\nNumber of cells in horizontal direction.\nIf set to \"auto\" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\nIf set to \"full\" only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above. <b>Note:<\/b> For labels full size has no effect.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>auto<\/code>.","!type":"fn(sHCells: sap.ui.layout.form.GridElementCells) -> sap.ui.layout.form.GridElementData","!category":"function"},"getHCells":{"!description":"Gets current value of property <code>hCells<\/code>.\n\nNumber of cells in horizontal direction.\nIf set to \"auto\" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\nIf set to \"full\" only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above. <b>Note:<\/b> For labels full size has no effect.\n\nDefault value is <code>auto<\/code>.","!type":"fn() -> sap.ui.layout.form.GridElementCells","!category":"function"},"!category":"class","getVCells":{"!description":"Gets current value of property <code>vCells<\/code>.\n\nNumber of cells in vertical direction.\n<b>Note:<\/b> This property has no effect for labels.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function"},"setVCells":{"!description":"Sets a new value for property <code>vCells<\/code>.\n\nNumber of cells in vertical direction.\n<b>Note:<\/b> This property has no effect for labels.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(iVCells: Number) -> sap.ui.layout.form.GridElementData","!category":"function"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.GridElementData.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"},"!proto":"sap.ui.core.LayoutData"},"sap.ui.layout.FixFlex":{"destroyFlexContent":{"!description":"Destroys the flexContent in the aggregation\nnamed <code>flexContent<\/code>.","!type":"fn() -> sap.ui.layout.FixFlex","!category":"function"},"setMinFlexSize":{"!description":"Sets a new value for property <code>minFlexSize<\/code>.\n\nEnables scrolling inside the flexible part. The given size is calculated in \"px\". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iMinFlexSize: Number) -> sap.ui.layout.FixFlex","!category":"function"},"getFixFirst":{"!description":"Gets current value of property <code>fixFirst<\/code>.\n\nDetermines whether the fixed-size area should be on the beginning/top ( if the value is \"true\") or beginning/bottom ( if the value is \"false\").\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"removeFixContent":{"!description":"Removes a fixContent from the aggregation named <code>fixContent<\/code>.","!type":"fn(vFixContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function"},"destroyFixContent":{"!description":"Destroys all the fixContent in the aggregation\nnamed <code>fixContent<\/code>.","!type":"fn() -> sap.ui.layout.FixFlex","!category":"function"},"addFixContent":{"!description":"Adds some fixContent into the aggregation named <code>fixContent<\/code>.","!type":"fn(oFixContent: sap.ui.core.Control) -> sap.ui.layout.FixFlex","!category":"function"},"getFixContent":{"!description":"Gets content of aggregation <code>fixContent<\/code>.\n\nControls in the fixed part of the layout.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"removeAllFixContent":{"!description":"Removes all the controls in the aggregation named <code>fixContent<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"indexOfFixContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation named <code>fixContent<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oFixContent: sap.ui.core.Control) -> Number","!category":"function"},"!description":"The FixFlex control builds the container for a layout with a fixed and a flexible part. The flexible container adapts its size to the fix container. The fix container can hold any number of controls, while the flexible container can hold only one.\n\nIn order for the FixFlex to stretch properly, the parent element, in which the control is placed, needs to have a specified height or needs to have an absolute position.\n\nWarning: Avoid nesting FixFlex in other flexbox based layout controls (FixFlex, FlexBox, Hbox, Vbox). Otherwise contents may be not accessible or multiple scrollbars can appear.\n\nNote: If the child control of the flex or the fix container has width/height bigger than the container itself, the child control will be cropped in the view. If minFlexSize is set, then a scrollbar is shown in the flexible part, depending on the vertical property.","!category":"class","getVertical":{"!description":"Gets current value of property <code>vertical<\/code>.\n\nDetermines the direction of the layout of child elements. True for vertical and false for horizontal layout.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"insertFixContent":{"!description":"Inserts a fixContent into the aggregation named <code>fixContent<\/code>.","!type":"fn(oFixContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.FixFlex","!category":"function"},"getFixContentSize":{"!description":"Gets current value of property <code>fixContentSize<\/code>.\n\nDetermines the height (if the vertical property is \"true\") or the width (if the vertical property is \"false\") of the fixed area. If left at the default value \"auto\", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.\n\nDefault value is <code>auto<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function"},"getFlexContent":{"!description":"Gets content of aggregation <code>flexContent<\/code>.\n\nControl in the stretching part of the layout.","!type":"fn() -> sap.ui.core.Control","!category":"function"},"getMinFlexSize":{"!description":"Gets current value of property <code>minFlexSize<\/code>.\n\nEnables scrolling inside the flexible part. The given size is calculated in \"px\". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function"},"setFlexContent":{"!description":"Sets the aggregated <code>flexContent<\/code>.","!type":"fn(oFlexContent: sap.ui.core.Control) -> sap.ui.layout.FixFlex","!category":"function"},"setVertical":{"!description":"Sets a new value for property <code>vertical<\/code>.\n\nDetermines the direction of the layout of child elements. True for vertical and false for horizontal layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVertical: Boolean) -> sap.ui.layout.FixFlex","!category":"function"},"setFixFirst":{"!description":"Sets a new value for property <code>fixFirst<\/code>.\n\nDetermines whether the fixed-size area should be on the beginning/top ( if the value is \"true\") or beginning/bottom ( if the value is \"false\").\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bFixFirst: Boolean) -> sap.ui.layout.FixFlex","!category":"function"},"setFixContentSize":{"!description":"Sets a new value for property <code>fixContentSize<\/code>.\n\nDetermines the height (if the vertical property is \"true\") or the width (if the vertical property is \"false\") of the fixed area. If left at the default value \"auto\", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>auto<\/code>.","!type":"fn(sFixContentSize: sap.ui.core.CSSSize) -> sap.ui.layout.FixFlex","!category":"function"},"!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.FixFlex.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"}},"sap.ui.layout.form.GridContainerData":{"!description":"<code>GridLayout<\/code>-specific properties for <code>FormContainers<\/code>.","!category":"class","getHalfGrid":{"!description":"Gets current value of property <code>halfGrid<\/code>.\n\nIf set, the container takes half the width of the <code>Form<\/code> (8 cells), if not it takes the full width (16 cells).\nIf the <code>GridLayout<\/code> is set to <code>singleColumn<\/code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"setHalfGrid":{"!description":"Sets a new value for property <code>halfGrid<\/code>.\n\nIf set, the container takes half the width of the <code>Form<\/code> (8 cells), if not it takes the full width (16 cells).\nIf the <code>GridLayout<\/code> is set to <code>singleColumn<\/code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bHalfGrid: Boolean) -> sap.ui.layout.form.GridContainerData","!category":"function"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.GridContainerData.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"},"!proto":"sap.ui.core.LayoutData"},"sap.ui.layout.HorizontalLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.HorizontalLayout with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.HorizontalLayout"},"sap.ui.layout.form.FormLayout":{"!description":"Base layout to render a <code>Form<\/code>.\nOther layouts to render a <code>Form<\/code> must inherit from this one.\n<b>Note:<\/b> This control must not be used to render a <code>Form<\/code> in productive applications as it does not fulfill any\ndesign guidelines and usability standards.","!category":"class","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.FormLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"},"!proto":"sap.ui.core.Control"},"sap.ui.layout.SideContentFallDown":{"!description":"Types of the DynamicSideContent FallDown options","BelowM":{"!description":"Side content falls down on breakpoints below M","!type":"String","!category":"enum"},"!category":"static class","BelowXL":{"!description":"Side content falls down on breakpoints below XL","!type":"String","!category":"enum"},"OnMinimumWidth":{"!description":"Side content falls down on breakpoint M and the minimum width for the side content","!type":"String","!category":"enum"},"BelowL":{"!description":"Side content falls down on breakpoints below L","!type":"String","!category":"enum"}},"sap.ui.layout.GridPosition":{"Right":{"!description":"Grid is aligned to the right.","!type":"String","!category":"enum"},"!description":"Position of the Grid. Can be \"Left\", \"Center\" or \"Right\". \"Left\" is default.","!category":"static class","Center":{"!description":"Grid is centered on the screen.","!type":"String","!category":"enum"},"Left":{"!description":"Grid is aligned left.","!type":"String","!category":"enum"}},"sap.ui.layout.GridData":{"getVisibleOnMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleM instead.<br>Gets current value of property <code>visibleOnMedium<\/code>.\n\nDeprecated. Defines if this Control is visible on Medium size screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"getIndentS":{"!description":"Gets current value of property <code>indentS<\/code>.\n\nOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function"},"getIndent":{"!description":"Gets current value of property <code>indent<\/code>.\n\nA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!type":"fn() -> sap.ui.layout.GridIndent","!category":"function"},"getSpanLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanL instead.<br>Gets current value of property <code>spanLarge<\/code>.\n\nDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function"},"getVisibleXL":{"!description":"Gets current value of property <code>visibleXL<\/code>.\n\nDefines if this Control is visible on XL - extra Large screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"setIndentM":{"!description":"Sets a new value for property <code>indentM<\/code>.\n\nOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentM: Number) -> sap.ui.layout.GridData","!category":"function"},"setIndentL":{"!description":"Sets a new value for property <code>indentL<\/code>.\n\nOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentL: Number) -> sap.ui.layout.GridData","!category":"function"},"getVisibleL":{"!description":"Gets current value of property <code>visibleL<\/code>.\n\nDefines if this Control is visible on Large screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"getMoveForward":{"!description":"Gets current value of property <code>moveForward<\/code>.\n\nOptional. Moves a cell forwards so many columns as specified.","!type":"fn() -> sap.ui.layout.GridIndent","!category":"function"},"getVisibleM":{"!description":"Gets current value of property <code>visibleM<\/code>.\n\nDefines if this Control is visible on Medium size screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"setVisibleOnLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleL instead.<br>Sets a new value for property <code>visibleOnLarge<\/code>.\n\nDeprecated. Defines if this Control is visible on Large screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleOnLarge: Boolean) -> sap.ui.layout.GridData","!category":"function"},"setIndentXL":{"!description":"Sets a new value for property <code>indentXL<\/code>.\n\nOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentXL: Number) -> sap.ui.layout.GridData","!category":"function"},"getVisibleS":{"!description":"Gets current value of property <code>visibleS<\/code>.\n\nDefines if this Control is visible on small screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"getIndentM":{"!description":"Gets current value of property <code>indentM<\/code>.\n\nOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function"},"setVisibleS":{"!description":"Sets a new value for property <code>visibleS<\/code>.\n\nDefines if this Control is visible on small screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleS: Boolean) -> sap.ui.layout.GridData","!category":"function"},"getIndentL":{"!description":"Gets current value of property <code>indentL<\/code>.\n\nOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function"},"setIndentSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentS instead.<br>Sets a new value for property <code>indentSmall<\/code>.\n\nDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentSmall: Number) -> sap.ui.layout.GridData","!category":"function"},"setVisibleOnMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleM instead.<br>Sets a new value for property <code>visibleOnMedium<\/code>.\n\nDeprecated. Defines if this Control is visible on Medium size screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleOnMedium: Boolean) -> sap.ui.layout.GridData","!category":"function"},"setSpanSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanS instead.<br>Sets a new value for property <code>spanSmall<\/code>.\n\nDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanSmall: Number) -> sap.ui.layout.GridData","!category":"function"},"getSpanXL":{"!description":"Gets current value of property <code>spanXL<\/code>.\n\nOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function"},"setVisibleM":{"!description":"Sets a new value for property <code>visibleM<\/code>.\n\nDefines if this Control is visible on Medium size screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleM: Boolean) -> sap.ui.layout.GridData","!category":"function"},"getMoveBackwards":{"!description":"Gets current value of property <code>moveBackwards<\/code>.\n\nOptional. Moves a cell backwards so many columns as specified.","!type":"fn() -> sap.ui.layout.GridIndent","!category":"function"},"setVisibleL":{"!description":"Sets a new value for property <code>visibleL<\/code>.\n\nDefines if this Control is visible on Large screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleL: Boolean) -> sap.ui.layout.GridData","!category":"function"},"getLinebreakXL":{"!description":"Gets current value of property <code>linebreakXL<\/code>.\n\nOptional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"getLinebreakM":{"!description":"Gets current value of property <code>linebreakM<\/code>.\n\nOptional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"getSpanSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanS instead.<br>Gets current value of property <code>spanSmall<\/code>.\n\nDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function"},"getLinebreakS":{"!description":"Gets current value of property <code>linebreakS<\/code>.\n\nOptional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"setIndentS":{"!description":"Sets a new value for property <code>indentS<\/code>.\n\nOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentS: Number) -> sap.ui.layout.GridData","!category":"function"},"setIndent":{"!description":"Sets a new value for property <code>indent<\/code>.\n\nA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sIndent: sap.ui.layout.GridIndent) -> sap.ui.layout.GridData","!category":"function"},"setSpanS":{"!description":"Sets a new value for property <code>spanS<\/code>.\n\nOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanS: Number) -> sap.ui.layout.GridData","!category":"function"},"setIndentMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentM instead.<br>Sets a new value for property <code>indentMedium<\/code>.\n\nDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentMedium: Number) -> sap.ui.layout.GridData","!category":"function"},"setSpanM":{"!description":"Sets a new value for property <code>spanM<\/code>.\n\nOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanM: Number) -> sap.ui.layout.GridData","!category":"function"},"setSpanL":{"!description":"Sets a new value for property <code>spanL<\/code>.\n\nOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanL: Number) -> sap.ui.layout.GridData","!category":"function"},"getLinebreakL":{"!description":"Gets current value of property <code>linebreakL<\/code>.\n\nOptional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"!proto":"sap.ui.core.LayoutData","getIndentMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentM instead.<br>Gets current value of property <code>indentMedium<\/code>.\n\nDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function"},"getIndentXL":{"!description":"Gets current value of property <code>indentXL<\/code>.\n\nOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function"},"getSpanMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanM instead.<br>Gets current value of property <code>spanMedium<\/code>.\n\nDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function"},"setMoveBackwards":{"!description":"Sets a new value for property <code>moveBackwards<\/code>.\n\nOptional. Moves a cell backwards so many columns as specified.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sMoveBackwards: sap.ui.layout.GridIndent) -> sap.ui.layout.GridData","!category":"function"},"getLinebreak":{"!description":"Gets current value of property <code>linebreak<\/code>.\n\nOptional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"setSpanMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanM instead.<br>Sets a new value for property <code>spanMedium<\/code>.\n\nDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanMedium: Number) -> sap.ui.layout.GridData","!category":"function"},"setSpanLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanL instead.<br>Sets a new value for property <code>spanLarge<\/code>.\n\nDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanLarge: Number) -> sap.ui.layout.GridData","!category":"function"},"setLinebreakXL":{"!description":"Sets a new value for property <code>linebreakXL<\/code>.\n\nOptional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bLinebreakXL: Boolean) -> sap.ui.layout.GridData","!category":"function"},"getVisibleOnSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleS instead.<br>Gets current value of property <code>visibleOnSmall<\/code>.\n\nDeprecated. Defines if this Control is visible on small screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"setLinebreakS":{"!description":"Sets a new value for property <code>linebreakS<\/code>.\n\nOptional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bLinebreakS: Boolean) -> sap.ui.layout.GridData","!category":"function"},"setVisibleOnSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleS instead.<br>Sets a new value for property <code>visibleOnSmall<\/code>.\n\nDeprecated. Defines if this Control is visible on small screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleOnSmall: Boolean) -> sap.ui.layout.GridData","!category":"function"},"!category":"class","setLinebreakM":{"!description":"Sets a new value for property <code>linebreakM<\/code>.\n\nOptional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bLinebreakM: Boolean) -> sap.ui.layout.GridData","!category":"function"},"setLinebreakL":{"!description":"Sets a new value for property <code>linebreakL<\/code>.\n\nOptional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bLinebreakL: Boolean) -> sap.ui.layout.GridData","!category":"function"},"getIndentSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentS instead.<br>Gets current value of property <code>indentSmall<\/code>.\n\nDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function"},"setSpanXL":{"!description":"Sets a new value for property <code>spanXL<\/code>.\n\nOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanXL: Number) -> sap.ui.layout.GridData","!category":"function"},"setSpan":{"!description":"Sets a new value for property <code>span<\/code>.\n\nA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sSpan: sap.ui.layout.GridSpan) -> sap.ui.layout.GridData","!category":"function"},"setIndentLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentL instead.<br>Sets a new value for property <code>indentLarge<\/code>.\n\nDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentLarge: Number) -> sap.ui.layout.GridData","!category":"function"},"getSpanS":{"!description":"Gets current value of property <code>spanS<\/code>.\n\nOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function"},"setVisibleXL":{"!description":"Sets a new value for property <code>visibleXL<\/code>.\n\nDefines if this Control is visible on XL - extra Large screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleXL: Boolean) -> sap.ui.layout.GridData","!category":"function"},"!description":"Grid layout data","setLinebreak":{"!description":"Sets a new value for property <code>linebreak<\/code>.\n\nOptional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bLinebreak: Boolean) -> sap.ui.layout.GridData","!category":"function"},"getSpanM":{"!description":"Gets current value of property <code>spanM<\/code>.\n\nOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function"},"getVisibleOnLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleL instead.<br>Gets current value of property <code>visibleOnLarge<\/code>.\n\nDeprecated. Defines if this Control is visible on Large screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"getSpanL":{"!description":"Gets current value of property <code>spanL<\/code>.\n\nOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function"},"getIndentLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentL instead.<br>Gets current value of property <code>indentLarge<\/code>.\n\nDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function"},"setMoveForward":{"!description":"Sets a new value for property <code>moveForward<\/code>.\n\nOptional. Moves a cell forwards so many columns as specified.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sMoveForward: sap.ui.layout.GridIndent) -> sap.ui.layout.GridData","!category":"function"},"getSpan":{"!description":"Gets current value of property <code>span<\/code>.\n\nA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!type":"fn() -> sap.ui.layout.GridSpan","!category":"function"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.GridData.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"}},"sap.ui.layout.DynamicSideContent":{"getEqualSplit":{"!description":"Gets current value of property <code>equalSplit<\/code>.\n\nDefines whether the control is in equal split mode. In this mode, the side and the main content\ntake 50:50 percent of the container on all screen sizes except for phone, where the main and\nside contents are switching visibility using the toggle method.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"addMainContent":{"!description":"Adds a control to the main content area.\nOnly the main content part in the aggregation is re-rendered.","!type":"fn(oControl: Object) -> sap.m.DynamicSideContent","!category":"function"},"insertMainContent":{"!description":"Inserts a mainContent into the aggregation named <code>mainContent<\/code>.","!type":"fn(oMainContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.DynamicSideContent","!category":"function"},"getContainerQuery":{"!description":"Gets current value of property <code>containerQuery<\/code>.\n\nIf set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"detachBreakpointChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the 'breakpointChanged' event of this <code>sap.ui.layout.DynamicSideContent<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.layout.DynamicSideContent","!category":"function"},"toggle":{"!description":"Used for the toggle button functionality.\nWhen the control is on a phone screen size only, one control area is visible.\nThis helper method is used to implement a button/switch for changing\nbetween the main and side content areas.\nOnly works if the current breakpoint is \"S\".","!type":"fn() -> sap.m.DynamicSideContent","!category":"function"},"setShowMainContent":{"!description":"Sets the showMainContent property.","!type":"fn(bVisible: Boolean, bSuppressVisualUpdate: Boolean) -> sap.m.DynamicSideContent","!category":"function"},"setEqualSplit":{"!description":"Sets or unsets the page in equalSplit mode.","!type":"fn(bState?: Boolean) -> sap.m.DynamicSideContent","!category":"function"},"setContainerQuery":{"!description":"Sets a new value for property <code>containerQuery<\/code>.\n\nIf set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bContainerQuery: Boolean) -> sap.ui.layout.DynamicSideContent","!category":"function"},"indexOfMainContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation named <code>mainContent<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oMainContent: sap.ui.core.Control) -> Number","!category":"function"},"removeAllMainContent":{"!description":"Removes all the controls in the aggregation named <code>mainContent<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"indexOfSideContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation named <code>sideContent<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oSideContent: sap.ui.core.Control) -> Number","!category":"function"},"!category":"class","removeAllSideContent":{"!description":"Removes all the controls in the aggregation named <code>sideContent<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"getCurrentBreakpoint":{"!description":"Returns the breakpoint for the current state of the control.","!type":"fn() -> String","!category":"function"},"setSideContentFallDown":{"!description":"Sets a new value for property <code>sideContentFallDown<\/code>.\n\nDetermines on which breakpoints the side content falls down below the main content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>OnMinimumWidth<\/code>.","!type":"fn(sSideContentFallDown: sap.ui.layout.SideContentFallDown) -> sap.ui.layout.DynamicSideContent","!category":"function"},"getShowSideContent":{"!description":"Gets the value of showSideContent property.","!type":"fn() -> Boolean","!category":"function"},"getSideContent":{"!description":"Gets content of aggregation <code>sideContent<\/code>.\n\nSide content controls.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"setShowSideContent":{"!description":"Sets the showSideContent property.","!type":"fn(bVisible: Boolean, bSuppressVisualUpdate: Boolean) -> sap.m.DynamicSideContent","!category":"function"},"getSideContentVisibility":{"!description":"Gets current value of property <code>sideContentVisibility<\/code>.\n\nDetermines on which breakpoints the side content is visible.\n\nDefault value is <code>ShowAboveS<\/code>.","!type":"fn() -> sap.ui.layout.SideContentVisibility","!category":"function"},"destroySideContent":{"!description":"Destroys all the sideContent in the aggregation\nnamed <code>sideContent<\/code>.","!type":"fn() -> sap.ui.layout.DynamicSideContent","!category":"function"},"destroyMainContent":{"!description":"Destroys all the mainContent in the aggregation\nnamed <code>mainContent<\/code>.","!type":"fn() -> sap.ui.layout.DynamicSideContent","!category":"function"},"setSideContentVisibility":{"!description":"Sets a new value for property <code>sideContentVisibility<\/code>.\n\nDetermines on which breakpoints the side content is visible.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>ShowAboveS<\/code>.","!type":"fn(sSideContentVisibility: sap.ui.layout.SideContentVisibility) -> sap.ui.layout.DynamicSideContent","!category":"function"},"getMainContent":{"!description":"Gets content of aggregation <code>mainContent<\/code>.\n\nMain content controls.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"removeMainContent":{"!description":"Removes a mainContent from the aggregation named <code>mainContent<\/code>.","!type":"fn(vMainContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function"},"getShowMainContent":{"!description":"Gets the value of showMainContent property.","!type":"fn() -> Boolean","!category":"function"},"fireBreakpointChanged":{"!description":"Fires event breakpointChanged to attached listeners.\n\nExpects the following event parameters:\n<ul>\n<li>'currentBreakpoint' of type <code>string<\/code><\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> sap.ui.layout.DynamicSideContent","!category":"function"},"attachBreakpointChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the 'breakpointChanged' event of this <code>sap.ui.layout.DynamicSideContent<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified\notherwise it will be bound to this <code>sap.ui.layout.DynamicSideContent<\/code> itself.\n\nFires when the current breakpoint has been changed.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.layout.DynamicSideContent","!category":"function"},"insertSideContent":{"!description":"Inserts a sideContent into the aggregation named <code>sideContent<\/code>.","!type":"fn(oSideContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.DynamicSideContent","!category":"function"},"!description":"The DynamicSideContent control allows additional (side) content to be displayed alongside or below the main\ncontent, within the container the control is used in. There are different size ratios between the main and\nthe side content for the different breakpoints. The side content position (alongside/below the main content)\nand visibility (visible/hidden) can be configured per breakpoint. There are 4 predefined breakpoints:\n- Screen width > 1440 px (XL breakpoint)\n- Screen width <= 1440 px (L breakpoint)\n- Main content width <= 600 px (M breakpoint)\n- Screen width <= 720 px (S breakpoint)","removeSideContent":{"!description":"Removes a sideContent from the aggregation named <code>sideContent<\/code>.","!type":"fn(vSideContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function"},"addSideContent":{"!description":"Adds a control to the side content area.\nOnly the side content part in the aggregation is re-rendered.","!type":"fn(oControl: Object) -> sap.m.DynamicSideContent","!category":"function"},"getSideContentFallDown":{"!description":"Gets current value of property <code>sideContentFallDown<\/code>.\n\nDetermines on which breakpoints the side content falls down below the main content.\n\nDefault value is <code>OnMinimumWidth<\/code>.","!type":"fn() -> sap.ui.layout.SideContentFallDown","!category":"function"},"!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.DynamicSideContent.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"}},"sap.ui.layout.GridData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.GridData with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.GridData"},"sap":{"ui":"sap.ui","sap":"sap","!category":"namespace"},"sap.ui.layout.ResponsiveFlowLayoutData":{"setMargin":{"!description":"Sets a new value for property <code>margin<\/code>.\n\nThis property prevents any margin of the element if set to false\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bMargin: Boolean) -> sap.ui.layout.ResponsiveFlowLayoutData","!category":"function"},"setWeight":{"!description":"Sets a new value for property <code>weight<\/code>.\n\nThis is the weight of the element that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout each element could have another weight. The bigger the weight of a single element the wider it will be pumped up --> a bigger weight result a bigger width.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(iWeight: Number) -> sap.ui.layout.ResponsiveFlowLayoutData","!category":"function"},"getLinebreak":{"!description":"Gets current value of property <code>linebreak<\/code>.\n\nIf this property is set the control where this LayoutData is added to will always cause a linebreak within the ResponsiveFlowLayout\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"getMinWidth":{"!description":"Gets current value of property <code>minWidth<\/code>.\n\nThis is the minimal size in pixels of an ResponsiveFlowLayout element. The element will be shrinked till this value.\n\nDefault value is <code>100<\/code>.","!type":"fn() -> Number","!category":"function"},"setLinebreakable":{"!description":"Sets a new value for property <code>linebreakable<\/code>.\n\nIf this value shows if an element can be wrapped into a new line. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bLinebreakable: Boolean) -> sap.ui.layout.ResponsiveFlowLayoutData","!category":"function"},"setMinWidth":{"!description":"Sets a new value for property <code>minWidth<\/code>.\n\nThis is the minimal size in pixels of an ResponsiveFlowLayout element. The element will be shrinked till this value.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100<\/code>.","!type":"fn(iMinWidth: Number) -> sap.ui.layout.ResponsiveFlowLayoutData","!category":"function"},"getWeight":{"!description":"Gets current value of property <code>weight<\/code>.\n\nThis is the weight of the element that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout each element could have another weight. The bigger the weight of a single element the wider it will be pumped up --> a bigger weight result a bigger width.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function"},"!description":"This is a LayoutData Element that can be added to a control if this control is used within a ResponsiveFlowLayout","setLinebreak":{"!description":"Sets a new value for property <code>linebreak<\/code>.\n\nIf this property is set the control where this LayoutData is added to will always cause a linebreak within the ResponsiveFlowLayout\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bLinebreak: Boolean) -> sap.ui.layout.ResponsiveFlowLayoutData","!category":"function"},"getLinebreakable":{"!description":"Gets current value of property <code>linebreakable<\/code>.\n\nIf this value shows if an element can be wrapped into a new line. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"!category":"class","getMargin":{"!description":"Gets current value of property <code>margin<\/code>.\n\nThis property prevents any margin of the element if set to false\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"!proto":"sap.ui.core.LayoutData","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.ResponsiveFlowLayoutData.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"}},"sap.ui.layout.form.Form":{"removeAllFormContainers":{"!description":"Removes all the controls in the aggregation named <code>formContainers<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.layout.form.FormContainer]","!category":"function"},"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named <code>ariaLabelledBy<\/code>.","!type":"fn(vAriaLabelledBy: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function"},"addFormContainer":{"!description":"Adds some formContainer into the aggregation named <code>formContainers<\/code>.","!type":"fn(oFormContainer: sap.ui.layout.form.FormContainer) -> sap.ui.layout.form.Form","!category":"function"},"setLayout":{"!description":"Sets the aggregated <code>layout<\/code>.","!type":"fn(oLayout: sap.ui.layout.form.FormLayout) -> sap.ui.layout.form.Form","!category":"function"},"setEditable":{"!description":"Sets a new value for property <code>editable<\/code>.\n\nApplies a device and theme specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\nThe accessibility aria-readonly attribute is set according to this property.\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bEditable: Boolean) -> sap.ui.layout.form.Form","!category":"function"},"removeFormContainer":{"!description":"Removes a formContainer from the aggregation named <code>formContainers<\/code>.","!type":"fn(vFormContainer: Number | String | sap.ui.layout.form.FormContainer) -> sap.ui.layout.form.FormContainer","!category":"function"},"!category":"class","getTitle":{"!description":"Gets content of aggregation <code>title<\/code>.\n\nTitle of the <code>Form<\/code>. Can either be a <code>Title<\/code> object, or a string.\nIf a <code>Title<\/code> object it used, the style of the title can be set.","!type":"fn() -> sap.ui.core.Title","!category":"function"},"getWidth":{"!description":"Gets current value of property <code>width<\/code>.\n\nWidth of the <code>Form<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function"},"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the <code>ariaLabelledBy<\/code> association.\n\nAssociation to controls / IDs that label this control (see WAI-ARIA attribute aria-labelledby).","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\n\nWidth of the <code>Form<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.form.Form","!category":"function"},"getFormContainers":{"!description":"Gets content of aggregation <code>formContainers<\/code>.\n\nContainers with the content of the form. A <code>FormContainer<\/code> represents a group inside the <code>Form<\/code>.","!type":"fn() -> [sap.ui.layout.form.FormContainer]","!category":"function"},"destroyFormContainers":{"!description":"Destroys all the formContainers in the aggregation\nnamed <code>formContainers<\/code>.","!type":"fn() -> sap.ui.layout.form.Form","!category":"function"},"getEditable":{"!description":"Gets current value of property <code>editable<\/code>.\n\nApplies a device and theme specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\nThe accessibility aria-readonly attribute is set according to this property.\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named <code>ariaLabelledBy<\/code>.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"destroyTitle":{"!description":"Destroys the title in the aggregation\nnamed <code>title<\/code>.","!type":"fn() -> sap.ui.layout.form.Form","!category":"function"},"addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association named <code>ariaLabelledBy<\/code>.","!type":"fn(vAriaLabelledBy: String | sap.ui.core.Control) -> sap.ui.layout.form.Form","!category":"function"},"!description":"Form control.\nA <code>Form<\/code> is structured into <code>FormContainers<\/code>. Each <code>FormContainer<\/code> consists of <code>FormElements<\/code>.\nThe <code>FormElements<\/code> consists of a label and the form fields.\nA <code>Form<\/code> doesn't render its content by itself. The rendering is done by the assigned <code>FormLayout<\/code>.\nThis is so that the rendering can be adopted to new UI requirements without changing the Form itself.\n\nFor the content of a <code>Form<\/code>, <code>VariantLayoutData<\/code> are supported to allow simple switching of the <code>FormLayout<\/code>.\n<code>LayoutData<\/code> on the content can be used to overwrite the default layout of the code>Form<\/code>.","setTitle":{"!description":"Sets the aggregated <code>title<\/code>.","!type":"fn(oTitle: sap.ui.core.Title) -> sap.ui.layout.form.Form","!category":"function"},"getLayout":{"!description":"Gets content of aggregation <code>layout<\/code>.\n\nLayout of the <code>Form<\/code>. The assigned <code>Layout<\/code> renders the <code>Form<\/code>.\nWe suggest using the <code>ResponsiveGridLayout<\/code> for rendering a <code>Form<\/code>, as its responsiveness allows the available space to be used in the best way possible.","!type":"fn() -> sap.ui.layout.form.FormLayout","!category":"function"},"insertFormContainer":{"!description":"Inserts a formContainer into the aggregation named <code>formContainers<\/code>.","!type":"fn(oFormContainer: sap.ui.layout.form.FormContainer, iIndex: Number) -> sap.ui.layout.form.Form","!category":"function"},"indexOfFormContainer":{"!description":"Checks for the provided <code>sap.ui.layout.form.FormContainer<\/code> in the aggregation named <code>formContainers<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oFormContainer: sap.ui.layout.form.FormContainer) -> Number","!category":"function"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.Form.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"},"destroyLayout":{"!description":"Destroys the layout in the aggregation\nnamed <code>layout<\/code>.","!type":"fn() -> sap.ui.layout.form.Form","!category":"function"},"!proto":"sap.ui.core.Control"},"sap.ui.layout.SideContentVisibility":{"NeverShow":{"!description":"Don't show the side content on any breakpoints","!type":"String","!category":"enum"},"!description":"Types of the DynamicSideContent Visibility options","ShowAboveS":{"!description":"Show the side content on M, L and XL breakpoints","!type":"String","!category":"enum"},"!category":"static class","AlwaysShow":{"!description":"Show the side content on any breakpoint","!type":"String","!category":"enum"},"ShowAboveL":{"!description":"Show the side content on XL breakpoint","!type":"String","!category":"enum"},"ShowAboveM":{"!description":"Show the side content on L and XL breakpoints","!type":"String","!category":"enum"}},"sap.ui.layout.form.FormContainer_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormContainer with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.FormContainer"},"sap.ui.layout.form.GridContainerData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridContainerData with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.GridContainerData"},"sap.ui.layout.form.GridLayout":{"setSingleColumn":{"!description":"Sets a new value for property <code>singleColumn<\/code>.\n\nIf set, the grid renders only one <code>FormContainer<\/code> per column. That means one <code>FormContainer<\/code> is below the other. The whole grid has 8 cells per row.\n\nIf not set, <code>FormContainer<\/code> can use the full width of the grid or two <code>FormContainers<\/code> can be placed beside each other. In this case the whole grid has 16 cells per row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bSingleColumn: Boolean) -> sap.ui.layout.form.GridLayout","!category":"function"},"!description":"This <code>FormLayout<\/code> renders a <code>Form<\/code> using a HTML-table based grid.\nThis can be a 16 column grid or an 8 column grid. The grid is stable, so the alignment of the fields is the same for all screen sizes or widths of the <code>Form<\/code>.\nOnly the width of the single grid columns depends on the available width.\n\nTo adjust the appearance inside the <code>GridLayout<\/code>, you can use <code>GridContainerData<\/code> for <code>FormContainers<\/code>\nand <code>GridElementData<\/code> for content fields.\n\n<b>Note:<\/b> If content fields have a <code>width<\/code> property this will be ignored, as the width of the controls is set by the grid cells.\n\nThis control cannot be used stand alone, it only renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code>.","getSingleColumn":{"!description":"Gets current value of property <code>singleColumn<\/code>.\n\nIf set, the grid renders only one <code>FormContainer<\/code> per column. That means one <code>FormContainer<\/code> is below the other. The whole grid has 8 cells per row.\n\nIf not set, <code>FormContainer<\/code> can use the full width of the grid or two <code>FormContainers<\/code> can be placed beside each other. In this case the whole grid has 16 cells per row.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"!category":"class","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.GridLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"},"!proto":"sap.ui.layout.form.FormLayout"},"sap.ui.layout.VerticalLayout":{"addContent":{"!description":"Adds some content into the aggregation named <code>content<\/code>.","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.VerticalLayout","!category":"function"},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\n\nContent controls within the layout.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"removeAllContent":{"!description":"Removes all the controls in the aggregation named <code>content<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"getEnabled":{"!description":"Gets current value of property <code>enabled<\/code>.\n\n\nIf not enabled, all controls inside are not enabled automatically.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation named <code>content<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.core.Control) -> Number","!category":"function"},"removeContent":{"!description":"Removes a content from the aggregation named <code>content<\/code>.","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function"},"destroyContent":{"!description":"Destroys all the content in the aggregation\nnamed <code>content<\/code>.","!type":"fn() -> sap.ui.layout.VerticalLayout","!category":"function"},"!description":"In this layout the content controls are rendered one below the other.","insertContent":{"!description":"Inserts a content into the aggregation named <code>content<\/code>.","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.VerticalLayout","!category":"function"},"!category":"class","setEnabled":{"!description":"Sets a new value for property <code>enabled<\/code>.\n\n\nIf not enabled, all controls inside are not enabled automatically.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bEnabled: Boolean) -> sap.ui.layout.VerticalLayout","!category":"function"},"getWidth":{"!description":"Gets current value of property <code>width<\/code>.\n\nWidth of the <code>VerticalLayout<\/code>. If no width is set, the width of the content is used.\nIf the content of the layout has a larger width than the layout, it is cut off.\nThere is no scrolling inside the layout.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function"},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\n\nWidth of the <code>VerticalLayout<\/code>. If no width is set, the width of the content is used.\nIf the content of the layout has a larger width than the layout, it is cut off.\nThere is no scrolling inside the layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.VerticalLayout","!category":"function"},"!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.VerticalLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"}},"sap.ui.layout.DynamicSideContent_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.DynamicSideContent with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.DynamicSideContent"},"sap.ui.layout":{"vertical":{"!description":"Determines the direction of the layout of child elements. True for vertical and false for horizontal layout.","!type":"Boolean","!category":"enum"},"spanXL":{"!description":"Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"moveForward":{"!description":"Optional. Moves a cell forwards so many columns as specified.","!type":"sap.ui.layout.GridIndent","!category":"enum"},"visible":{"!description":"Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control","!type":"Boolean","!category":"enum"},"minWidth":{"!description":"This is the minimal size in pixels of an ResponsiveFlowLayout element. The element will be shrinked till this value.","!type":"Number","!category":"enum"},"busy":{"!description":"Whether the control is currently in busy state.","!type":"Boolean","!category":"enum"},"defaultIndent":{"!description":"Optional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!type":"sap.ui.layout.GridIndent","!category":"enum"},"sideContentFallDown":{"!description":"Determines on which breakpoints the side content falls down below the main content.","!type":"sap.ui.layout.SideContentFallDown","!category":"enum"},"height":{"!description":"The height of the control","!type":"sap.ui.core.CSSSize","!category":"enum"},"indentS":{"!description":"Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"visibleL":{"!description":"Defines if this Control is visible on Large screens.","!type":"Boolean","!category":"enum"},"indentL":{"!description":"Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"visibleM":{"!description":"Defines if this Control is visible on Medium size screens.","!type":"Boolean","!category":"enum"},"indentM":{"!description":"Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"ResponsiveFlowLayoutData":"sap.ui.layout.ResponsiveFlowLayoutData_obj","resizable":{"!description":"Determines whether the control in the splitter can be resized or not.","!type":"Boolean","!category":"enum"},"margin":{"!description":"This property prevents any margin of the element if set to false","!type":"Boolean","!category":"enum"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!type":"Number","!category":"enum"},"showMainContent":{"!description":"Determines whether the main content is visible or hidden.","!type":"Boolean","!category":"enum"},"SideContentVisibility":"sap.ui.layout.SideContentVisibility","SplitterLayoutData":"sap.ui.layout.SplitterLayoutData_obj","indentSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentS instead.<br>Deprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"visibleOnMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleM instead.<br>Deprecated. Defines if this Control is visible on Medium size screens.","!type":"Boolean","!category":"enum"},"enabled":{"!description":"\nIf not enabled, all controls inside are not enabled automatically.","!type":"Boolean","!category":"enum"},"orientation":{"!description":"Whether to split the contents horizontally (default) or vertically.","!type":"sap.ui.core.Orientation","!category":"enum"},"equalSplit":{"!description":"Defines whether the control is in equal split mode. In this mode, the side and the main content\ntake 50:50 percent of the container on all screen sizes except for phone, where the main and\nside contents are switching visibility using the toggle method.","!type":"Boolean","!category":"enum"},"form":"sap.ui.layout.form","indent":{"!description":"A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!type":"sap.ui.layout.GridIndent","!category":"enum"},"width":{"!description":"Width of the <code>VerticalLayout<\/code>. If no width is set, the width of the content is used.\nIf the content of the layout has a larger width than the layout, it is cut off.\nThere is no scrolling inside the layout.","!type":"sap.ui.core.CSSSize","!category":"enum"},"indentXL":{"!description":"Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"visibleS":{"!description":"Defines if this Control is visible on small screens.","!type":"Boolean","!category":"enum"},"size":{"!description":"Sets the size of the splitter content.","!type":"sap.ui.core.CSSSize","!category":"enum"},"spanS":{"!description":"Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"HorizontalLayout":"sap.ui.layout.HorizontalLayout_obj","minSize":{"!description":"Sets the minimum size of the splitter content in px.","!type":"Number","!category":"enum"},"GridSpan":"sap.ui.layout.GridSpan","spanL":{"!description":"Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"spanM":{"!description":"Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"spanLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanL instead.<br>Deprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"span":{"!description":"A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!type":"sap.ui.layout.GridSpan","!category":"enum"},"ResponsiveFlowLayout":"sap.ui.layout.ResponsiveFlowLayout_obj","position":{"!description":"Optional. Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".","!type":"sap.ui.layout.GridPosition","!category":"enum"},"weight":{"!description":"This is the weight of the element that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout each element could have another weight. The bigger the weight of a single element the wider it will be pumped up --> a bigger weight result a bigger width.","!type":"Number","!category":"enum"},"Splitter":"sap.ui.layout.Splitter_obj","linebreak":{"!description":"If this property is set the control where this LayoutData is added to will always cause a linebreak within the ResponsiveFlowLayout","!type":"Boolean","!category":"enum"},"DynamicSideContent":"sap.ui.layout.DynamicSideContent_obj","indentMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentM instead.<br>Deprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"showSideContent":{"!description":"Determines whether the side content is visible or hidden.","!type":"Boolean","!category":"enum"},"visibleOnSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleS instead.<br>Deprecated. Defines if this Control is visible on small screens.","!type":"Boolean","!category":"enum"},"fixFirst":{"!description":"Determines whether the fixed-size area should be on the beginning/top ( if the value is \"true\") or beginning/bottom ( if the value is \"false\").","!type":"Boolean","!category":"enum"},"containerQuery":{"!description":"If true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).","!type":"Boolean","!category":"enum"},"Grid":"sap.ui.layout.Grid_obj","!category":"namespace","visibleXL":{"!description":"Defines if this Control is visible on XL - extra Large screens.","!type":"Boolean","!category":"enum"},"GridData":"sap.ui.layout.GridData_obj","GridPosition":"sap.ui.layout.GridPosition","defaultSpan":{"!description":"Optional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!type":"sap.ui.layout.GridSpan","!category":"enum"},"vSpacing":{"!description":"Optional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.","!type":"Number","!category":"enum"},"linebreakable":{"!description":"If this value shows if an element can be wrapped into a new line. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.","!type":"Boolean","!category":"enum"},"spanSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanS instead.<br>Deprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"visibleOnLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleL instead.<br>Deprecated. Defines if this Control is visible on Large screens.","!type":"Boolean","!category":"enum"},"GridIndent":"sap.ui.layout.GridIndent","spanMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanM instead.<br>Deprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"hSpacing":{"!description":"Optional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.","!type":"Number","!category":"enum"},"moveBackwards":{"!description":"Optional. Moves a cell backwards so many columns as specified.","!type":"sap.ui.layout.GridIndent","!category":"enum"},"SideContentFallDown":"sap.ui.layout.SideContentFallDown","VerticalLayout":"sap.ui.layout.VerticalLayout_obj","!description":"SAPUI5 library with layout controls.","linebreakS":{"!description":"Optional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.","!type":"Boolean","!category":"enum"},"responsive":{"!description":"If this property is 'false' all added controls keep their widths. Otherwise all added controls will be extended to the possible width of a row.","!type":"Boolean","!category":"enum"},"FixFlex":"sap.ui.layout.FixFlex_obj","fixContentSize":{"!description":"Determines the height (if the vertical property is \"true\") or the width (if the vertical property is \"false\") of the fixed area. If left at the default value \"auto\", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.","!type":"sap.ui.core.CSSSize","!category":"enum"},"indentLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentL instead.<br>Deprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to. All fields in a logical field group should share the same <code>fieldGroupId<\/code>.\nOnce a logical field group is left, the validateFieldGroup event is raised.","!type":"[String]","!category":"enum"},"sideContentVisibility":{"!description":"Determines on which breakpoints the side content is visible.","!type":"sap.ui.layout.SideContentVisibility","!category":"enum"},"linebreakL":{"!description":"Optional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.","!type":"Boolean","!category":"enum"},"linebreakXL":{"!description":"Optional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.","!type":"Boolean","!category":"enum"},"minFlexSize":{"!description":"Enables scrolling inside the flexible part. The given size is calculated in \"px\". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.","!type":"Number","!category":"enum"},"allowWrapping":{"!description":"Specifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.","!type":"Boolean","!category":"enum"},"linebreakM":{"!description":"Optional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.","!type":"Boolean","!category":"enum"}},"sap.ui.layout.GridSpan":{"!description":"A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters have to be provided in the order large  medium  small.","!category":"namespace"},"sap.ui.layout.form.SimpleFormLayout":{"ResponsiveGridLayout":{"!description":"Uses the <code>ResponsiveGridLayout<\/code> to render the <code>SimpleForm<\/code>","!type":"String","!category":"enum"},"!description":"Available <code>FormLayouts<\/code> used to render a <code>SimpleForm<\/code>.","ResponsiveLayout":{"!description":"Uses the <code>ResponsiveLayout<\/code> to render the <code>SimpleForm<\/code>","!type":"String","!category":"enum"},"!category":"static class","GridLayout":{"!description":"Uses the <code>GridLayout<\/code> to render the <code>SimpleForm<\/code>","!type":"String","!category":"enum"}},"sap.ui.layout.Splitter":{"addContentArea":{"!description":"Adds some contentArea into the aggregation named <code>contentAreas<\/code>.","!type":"fn(oContentArea: sap.ui.core.Control) -> sap.ui.layout.Splitter","!category":"function"},"removeContentArea":{"!description":"Removes a contentArea from the aggregation named <code>contentAreas<\/code>.","!type":"fn(vContentArea: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function"},"disableLiveResize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Disables recalculation and resize of the splitter contents while dragging the splitter bar.\nThis means that the contents are resized only once after moving the splitter bar.","!type":"fn()","!category":"function"},"disableKeyboardSupport":{"!description":"Disables the resizing of the Splitter contents via keyboard. This changes the Splitter bars\nto non-focussable elements.","!type":"fn()","!category":"function"},"insertContentArea":{"!description":"Inserts a contentArea into the aggregation named <code>contentAreas<\/code>.","!type":"fn(oContentArea: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.Splitter","!category":"function"},"enableAutoResize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Enables the resize handler for this control, this leads to an automatic resize of\nthe contents whenever the control changes its size. The resize handler is enabled\nin every control instance by default.\nFor performance reasons this behavior can be disabled by calling disableAutoResize()","!type":"fn(bTemporarily?: bool)","!category":"function"},"getCalculatedSizes":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Returns the current actual content sizes as pixel value - these values can change with every \nresize.","!type":"fn() -> [Number]","!category":"function"},"getHeight":{"!description":"Gets current value of property <code>height<\/code>.\n\nThe height of the control\n\nDefault value is <code>100%<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function"},"!category":"class","setOrientation":{"!description":"Sets a new value for property <code>orientation<\/code>.\n\nWhether to split the contents horizontally (default) or vertically.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Horizontal<\/code>.","!type":"fn(sOrientation: sap.ui.core.Orientation) -> sap.ui.layout.Splitter","!category":"function"},"disableAutoResize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Disables the resize handler for this control, this leads to an automatic resize of\nthe contents whenever the control changes its size. The resize handler is enabled\nin every control instance by default.\nFor performance reasons this behavior can be disabled by calling disableAutoResize()","!type":"fn(bTemporarily?: bool)","!category":"function"},"destroyContentAreas":{"!description":"Destroys all the contentAreas in the aggregation\nnamed <code>contentAreas<\/code>.","!type":"fn() -> sap.ui.layout.Splitter","!category":"function"},"getWidth":{"!description":"Gets current value of property <code>width<\/code>.\n\nThe width of the control\n\nDefault value is <code>100%<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function"},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\n\nThe width of the control\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100%<\/code>.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.Splitter","!category":"function"},"triggerResize":{"!description":"This method  triggers a resize on the Splitter - meaning it forces the Splitter to recalculate\nall sizes.\nThis method should only be used in rare cases, for example when the CSS that defines the sizes\nof the splitter bars changes without triggering a rerendering of the splitter.","!type":"fn(forceDirectly?: Boolean)","!category":"function"},"fireResize":{"!description":"Fires event resize to attached listeners.\n\nExpects the following event parameters:\n<ul>\n<li>'id' of type <code>string<\/code>The ID of the splitter control. The splitter control can also be accessed by calling getSource() on the event.<\/li>\n<li>'oldSizes' of type <code>int[]<\/code>An array of values representing the old (pixel-)sizes of the splitter contents<\/li>\n<li>'newSizes' of type <code>int[]<\/code>An array of values representing the new (pixel-)sizes of the splitter contents<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> sap.ui.layout.Splitter","!category":"function"},"getOrientation":{"!description":"Gets current value of property <code>orientation<\/code>.\n\nWhether to split the contents horizontally (default) or vertically.\n\nDefault value is <code>Horizontal<\/code>.","!type":"fn() -> sap.ui.core.Orientation","!category":"function"},"getContentAreas":{"!description":"Gets content of aggregation <code>contentAreas<\/code>.\n\nThe content areas to be split. The control will show n-1 splitter bars between n controls in this aggregation.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"attachResize":{"!description":"Attaches event handler <code>fnFunction<\/code> to the 'resize' event of this <code>sap.ui.layout.Splitter<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified\notherwise it will be bound to this <code>sap.ui.layout.Splitter<\/code> itself.\n\nEvent is fired when contents are resized.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.layout.Splitter","!category":"function"},"!description":"\nA layout that contains several content areas. The content that is added to the splitter should contain LayoutData of the type SplitterLayoutData that defines its size and size contraints.\n\nBy adding or changing SplitterLayoutData to the controls that make up the content areas, the size can be changed programatically. Additionally the contents can be made non-resizable individually and a minimal size (in px) can be set.\n\nThe orientation of the splitter can be set to horizontal (default) or vertical. All content areas of the splitter will be arranged in that way. In order to split vertically and horizontally at the same time, Splitters need to be nested.\n\nThe splitter bars can be focused to enable resizing of the content areas via keyboard. The contents size can be manipulated when the splitter bar is focused and Shift-Left/Down/Right/Up are pressed. When Shift-Home/End are pressed, the contents are set their minimum or maximum size (keep in mind though, that resizing an auto-size content-area next to another auto-size one might lead to the effect that the former does not take its maximum size but only the maximum size before recalculating auto sizes).\n\nThe splitter bars used for resizing the contents by the user can be set to different widths (or heights in vertical mode) and the splitter will automatically resize the other contents accordingly. In case the splitter bar is resized after the splitter has rendered, a manual resize has to be triggered by invoking triggerResize() on the Splitter.","enableLiveResize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Enables recalculation and resize of the splitter contents while dragging the splitter bar.\nThis means that the contents are resized several times per second when moving the splitter bar.","!type":"fn()","!category":"function"},"setHeight":{"!description":"Sets a new value for property <code>height<\/code>.\n\nThe height of the control\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100%<\/code>.","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.layout.Splitter","!category":"function"},"removeAllContentAreas":{"!description":"Removes all the controls in the aggregation named <code>contentAreas<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"detachResize":{"!description":"Detaches event handler <code>fnFunction<\/code> from the 'resize' event of this <code>sap.ui.layout.Splitter<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.layout.Splitter","!category":"function"},"enableKeyboardSupport":{"!description":"Enables the resizing of the Splitter contents via keyboard. This makes the Splitter bars\nfocussable elements.","!type":"fn()","!category":"function"},"indexOfContentArea":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation named <code>contentAreas<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oContentArea: sap.ui.core.Control) -> Number","!category":"function"},"!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.Splitter.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"}},"sap.ui.layout.form.ResponsiveLayout":{"!description":"Renders a <code>Form<\/code> with a responsive layout. Internally the <code>ResponsiveFlowLayout<\/code> is used.\nThe responsiveness of this layout tries to best use the available space. This means that the order of the <code>FormContainers<\/code>, labels and fields depends on the available space.\n\nOn the <code>FormContainers<\/code>, <code>FormElements<\/code>, labels and content fields, <code>ResponsiveFlowLayoutData<\/code> can be used to change the default rendering.\n\nWe suggest using the <code>ResponsiveGridLayout<\/code> instead of this layout because this is easier to consume and brings more stable responsive output.\n\n<b>Note:<\/b> If <code>ResponsiveFlowLayoutData<\/code> are used this may result in a much more complex layout than the default one. This means that in some cases, the calculation for the other content may not bring the expected result.\nIn such cases, <code>ResponsiveFlowLayoutData<\/code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used stand alone, it only renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code>.","!category":"class","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.ResponsiveLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"},"!proto":"sap.ui.layout.form.FormLayout"},"sap.ui.layout.form":{"visible":{"!description":"Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control","!type":"Boolean","!category":"enum"},"halfGrid":{"!description":"If set, the container takes half the width of the <code>Form<\/code> (8 cells), if not it takes the full width (16 cells).\nIf the <code>GridLayout<\/code> is set to <code>singleColumn<\/code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.","!type":"Boolean","!category":"enum"},"minWidth":{"!description":"The overall minimum width in pixels that is used for the <code>SimpleForm<\/code>. If the available width is below the given minWidth the SimpleForm will create a new row for the next group (<code>FormContainer<\/code>).\nThe default value is -1, meaning that inner groups (<code>FormContainers<\/code>) will be stacked until maxCols is reached, irrespective of whether a maxWidth is reached or the available parents width is reached.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"vCells":{"!description":"Number of cells in vertical direction.\n<b>Note:<\/b> This property has no effect for labels.","!type":"Number","!category":"enum"},"labelMinWidth":{"!description":"Specifies the min-width in pixels of the label in all form containers.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"busy":{"!description":"Whether the control is currently in busy state.","!type":"Boolean","!category":"enum"},"GridLayout":"sap.ui.layout.form.GridLayout_obj","FormContainer":"sap.ui.layout.form.FormContainer_obj","GridContainerData":"sap.ui.layout.form.GridContainerData_obj","columnsM":{"!description":"Form columns for medium size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"columnsL":{"!description":"Form columns for large size.\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"ResponsiveGridLayout":"sap.ui.layout.form.ResponsiveGridLayout_obj","Form":"sap.ui.layout.form.Form_obj","singleColumn":{"!description":"If set, the grid renders only one <code>FormContainer<\/code> per column. That means one <code>FormContainer<\/code> is below the other. The whole grid has 8 cells per row.\n\nIf not set, <code>FormContainer<\/code> can use the full width of the grid or two <code>FormContainers<\/code> can be placed beside each other. In this case the whole grid has 16 cells per row.","!type":"Boolean","!category":"enum"},"layout":{"!description":"The <code>FormLayout<\/code> that is used to render the <code>SimpleForm<\/code>.\nWe suggest using the <code>ResponsiveGridLayout<\/code> for rendering a <code>SimpleForm<\/code>, as its responsiveness uses the space available in the best way possible.","!type":"sap.ui.layout.form.SimpleFormLayout","!category":"enum"},"!category":"namespace","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!type":"Number","!category":"enum"},"FormLayout":"sap.ui.layout.form.FormLayout_obj","emptySpanL":{"!description":"Number of grid cells that are empty at the end of each line on large size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"emptySpanM":{"!description":"Number of grid cells that are empty at the end of each line on medium size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"hCells":{"!description":"Number of cells in horizontal direction.\nIf set to \"auto\" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\nIf set to \"full\" only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above. <b>Note:<\/b> For labels full size has no effect.","!type":"sap.ui.layout.form.GridElementCells","!category":"enum"},"labelSpanM":{"!description":"Default span for labels in medium size.\nThis property is used for full-size groups (<code>FormContainers<\/code>). If more than one group (<code>FormContainer<\/code>) is in one line, <code>labelSpanL<\/code> is used.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"maxContainerCols":{"!description":"The maximum amount of groups (<code>FormContainers<\/code>) per row that is used before a new row is started.\n<b>Note:<\/b> If a <code>ResponsiveGridLayout<\/code> is used as a layout, this property is not used. Please use the properties <code>ColumnsL<\/code> and <code>ColumnsM<\/code> in this case.","!type":"Number","!category":"enum"},"labelSpanL":{"!description":"Default span for labels in large size.\nThis span is only used if more than 1 group (<code>FormContainer<\/code>) is in one row. If only 1 group (<code>FormContainer<\/code>) is in the row the <code>labelSpanM<\/code> value is used.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"ResponsiveLayout":"sap.ui.layout.form.ResponsiveLayout_obj","width":{"!description":"Width of the form.","!type":"sap.ui.core.CSSSize","!category":"enum"},"emptySpanS":{"!description":"Number of grid cells that are empty at the end of each line on small size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"breakpointL":{"!description":"Breakpoint between Medium size and Large size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"GridElementData":"sap.ui.layout.form.GridElementData_obj","breakpointM":{"!description":"Breakpoint between Small size and Medium size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"expanded":{"!description":"Container is expanded.\n<b>Note:<\/b> This property only works if <code>expandable<\/code> is set to <code>true<\/code>.","!type":"Boolean","!category":"enum"},"SimpleFormLayout":"sap.ui.layout.form.SimpleFormLayout","editable":{"!description":"Applies a device-specific and theme-specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\nThe accessibility aria-readonly attribute is set according to this property.\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.","!type":"Boolean","!category":"enum"},"GridElementCells":"sap.ui.layout.form.GridElementCells","FormElement":"sap.ui.layout.form.FormElement_obj","fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to. All fields in a logical field group should share the same <code>fieldGroupId<\/code>.\nOnce a logical field group is left, the validateFieldGroup event is raised.","!type":"[String]","!category":"enum"},"SimpleForm":"sap.ui.layout.form.SimpleForm_obj","labelSpanS":{"!description":"Default span for labels in small size.\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"expandable":{"!description":"Defines if the <code>FormContainer<\/code> is expandable.\n<b>Note:<\/b> The expander icon will only be shown if a <code>title<\/code> is set for the <code>FormContainer<\/code>.","!type":"Boolean","!category":"enum"}},"sap.ui.layout.SplitterLayoutData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.SplitterLayoutData with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.SplitterLayoutData"},"sap.ui.layout.SplitterLayoutData":{"setSize":{"!description":"Sets a new value for property <code>size<\/code>.\n\nSets the size of the splitter content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>auto<\/code>.","!type":"fn(sSize: sap.ui.core.CSSSize) -> sap.ui.layout.SplitterLayoutData","!category":"function"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","setMinSize":{"!description":"Sets a new value for property <code>minSize<\/code>.\n\nSets the minimum size of the splitter content in px.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iMinSize: Number) -> sap.ui.layout.SplitterLayoutData","!category":"function"},"setResizable":{"!description":"Sets a new value for property <code>resizable<\/code>.\n\nDetermines whether the control in the splitter can be resized or not.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bResizable: Boolean) -> sap.ui.layout.SplitterLayoutData","!category":"function"},"!category":"class","getSize":{"!description":"Gets current value of property <code>size<\/code>.\n\nSets the size of the splitter content.\n\nDefault value is <code>auto<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function"},"getMinSize":{"!description":"Gets current value of property <code>minSize<\/code>.\n\nSets the minimum size of the splitter content in px.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function"},"getResizable":{"!description":"Gets current value of property <code>resizable<\/code>.\n\nDetermines whether the control in the splitter can be resized or not.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.SplitterLayoutData.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"},"!proto":"sap.ui.core.LayoutData"},"sap.ui.layout.form.FormElement_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormElement with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.FormElement"},"sap.ui.layout.form.ResponsiveGridLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.ResponsiveGridLayout with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.ResponsiveGridLayout"},"sap.ui.layout.FixFlex_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.FixFlex with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.FixFlex"},"sap.ui.layout.form.FormContainer":{"destroyFormElements":{"!description":"Destroys all the formElements in the aggregation\nnamed <code>formElements<\/code>.","!type":"fn() -> sap.ui.layout.form.FormContainer","!category":"function"},"insertFormElement":{"!description":"Inserts a formElement into the aggregation named <code>formElements<\/code>.","!type":"fn(oFormElement: sap.ui.layout.form.FormElement, iIndex: Number) -> sap.ui.layout.form.FormContainer","!category":"function"},"indexOfFormElement":{"!description":"Checks for the provided <code>sap.ui.layout.form.FormElement<\/code> in the aggregation named <code>formElements<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oFormElement: sap.ui.layout.form.FormElement) -> Number","!category":"function"},"getExpanded":{"!description":"Gets current value of property <code>expanded<\/code>.\n\nContainer is expanded.\n<b>Note:<\/b> This property only works if <code>expandable<\/code> is set to <code>true<\/code>.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"setVisible":{"!description":"Sets a new value for property <code>visible<\/code>.\n\nIf set to <code>false<\/code>, the <code>FormContainer<\/code> is not rendered.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisible: Boolean) -> sap.ui.layout.form.FormContainer","!category":"function"},"addFormElement":{"!description":"Adds some formElement into the aggregation named <code>formElements<\/code>.","!type":"fn(oFormElement: sap.ui.layout.form.FormElement) -> sap.ui.layout.form.FormContainer","!category":"function"},"getExpandable":{"!description":"Gets current value of property <code>expandable<\/code>.\n\nDefines if the <code>FormContainer<\/code> is expandable.\n<b>Note:<\/b> The expander icon will only be shown if a <code>title<\/code> is set for the <code>FormContainer<\/code>.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"destroyTitle":{"!description":"Destroys the title in the aggregation\nnamed <code>title<\/code>.","!type":"fn() -> sap.ui.layout.form.FormContainer","!category":"function"},"getVisible":{"!description":"Gets current value of property <code>visible<\/code>.\n\nIf set to <code>false<\/code>, the <code>FormContainer<\/code> is not rendered.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"!description":"A <code>FormContainer<\/code> represents a group inside a <code>Form<\/code>. It consists of <code>FormElements<\/code>.\nThe rendering of the <code>FormContainer<\/code> is done by the <code>FormLayout<\/code> assigned to the <code>Form<\/code>.","setTitle":{"!description":"Sets the aggregated <code>title<\/code>.","!type":"fn(oTitle: sap.ui.core.Title) -> sap.ui.layout.form.FormContainer","!category":"function"},"setExpanded":{"!description":"Sets a new value for property <code>expanded<\/code>.\n\nContainer is expanded.\n<b>Note:<\/b> This property only works if <code>expandable<\/code> is set to <code>true<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bExpanded: Boolean) -> sap.ui.layout.form.FormContainer","!category":"function"},"removeAllFormElements":{"!description":"Removes all the controls in the aggregation named <code>formElements<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.layout.form.FormElement]","!category":"function"},"!category":"class","getTitle":{"!description":"Gets content of aggregation <code>title<\/code>.\n\nTitle of the <code>FormContainer<\/code>. Can either be a <code>Title<\/code> object, or a string.\nIf a <code>Title<\/code> object is used, the style of the title can be set.","!type":"fn() -> sap.ui.core.Title","!category":"function"},"removeFormElement":{"!description":"Removes a formElement from the aggregation named <code>formElements<\/code>.","!type":"fn(vFormElement: Number | String | sap.ui.layout.form.FormElement) -> sap.ui.layout.form.FormElement","!category":"function"},"getFormElements":{"!description":"Gets content of aggregation <code>formElements<\/code>.\n\nThe <code>FormElements<\/code> contain the content (labels and fields) of the <code>FormContainers<\/code>.","!type":"fn() -> [sap.ui.layout.form.FormElement]","!category":"function"},"setExpandable":{"!description":"Sets a new value for property <code>expandable<\/code>.\n\nDefines if the <code>FormContainer<\/code> is expandable.\n<b>Note:<\/b> The expander icon will only be shown if a <code>title<\/code> is set for the <code>FormContainer<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bExpandable: Boolean) -> sap.ui.layout.form.FormContainer","!category":"function"},"!proto":"sap.ui.core.Element","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.FormContainer.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"}},"sap.ui.layout.form.GridElementCells":{"!description":"A string that defines the number of used cells in a <code>GridLayout<\/code>. This can be a number from 1 to 16, \"auto\" or \"full\".\nIf set to \"auto\" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\nIf set to \"full\" only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above. <b>Note:<\/b> For labels full size has no effect.","!category":"namespace"},"sap.ui.layout.form.FormElement":{"getLabelControl":{"!description":"Returns the <code>Label<\/code> of the <code>FormElement<\/code>, even if the <code>Label<\/code> is assigned as string.\nThe <code>FormLayout<\/code> needs the information of the label to render the <code>Form<\/code>.","!type":"fn() -> sap.ui.core.Label","!category":"function"},"removeField":{"!description":"Removes a field from the aggregation named <code>fields<\/code>.","!type":"fn(vField: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function"},"setVisible":{"!description":"Sets a new value for property <code>visible<\/code>.\n\nIf set to <code>false<\/code>, the <code>FormElement<\/code> is not rendered.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisible: Boolean) -> sap.ui.layout.form.FormElement","!category":"function"},"addField":{"!description":"Adds some field into the aggregation named <code>fields<\/code>.","!type":"fn(oField: sap.ui.core.Control) -> sap.ui.layout.form.FormElement","!category":"function"},"getFields":{"!description":"Gets content of aggregation <code>fields<\/code>.\n\nFormular controls that belong together to be displayed in one row of a <code>Form<\/code>.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"removeAllFields":{"!description":"Removes all the controls in the aggregation named <code>fields<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"setLabel":{"!description":"Sets the aggregated <code>label<\/code>.","!type":"fn(oLabel: sap.ui.core.Label) -> sap.ui.layout.form.FormElement","!category":"function"},"getLabel":{"!description":"Gets content of aggregation <code>label<\/code>.\n\nLabel of the fields. Can either be a <code>Label<\/code> object, or a string.\nIf a <code>Label<\/code> object is used, the properties of the <code>Label<\/code> can be set.\nIf no assignment between <code>Label<\/code> and the fields is set, it will be done automatically by the\n<code>FormElement<\/code>. In this case the <code>Label<\/code> is assigned to the fields of the <code>FormElement<\/code>.","!type":"fn() -> sap.ui.core.Label","!category":"function"},"destroyLabel":{"!description":"Destroys the label in the aggregation\nnamed <code>label<\/code>.","!type":"fn() -> sap.ui.layout.form.FormElement","!category":"function"},"destroyFields":{"!description":"Destroys all the fields in the aggregation\nnamed <code>fields<\/code>.","!type":"fn() -> sap.ui.layout.form.FormElement","!category":"function"},"getVisible":{"!description":"Gets current value of property <code>visible<\/code>.\n\nIf set to <code>false<\/code>, the <code>FormElement<\/code> is not rendered.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"!description":"A <code>FormElement<\/code> represents a row in a <code>FormContainer<\/code>.\nA <code>FormElement<\/code> is a combination of one label and different controls associated to this label.","!category":"class","indexOfField":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation named <code>fields<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oField: sap.ui.core.Control) -> Number","!category":"function"},"!proto":"sap.ui.core.Element","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.FormElement.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"},"insertField":{"!description":"Inserts a field into the aggregation named <code>fields<\/code>.","!type":"fn(oField: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.form.FormElement","!category":"function"}},"sap.ui.layout.ResponsiveFlowLayout":{"addContent":{"!description":"This function needs to be overridden to prevent any rendering while some\ncontent is still being added.","!type":"fn(oContent: sap.ui.core.Control)","!category":"function"},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\n\nAdded content that should be positioned. Every content item should have a ResponsiveFlowLayoutData attached otherwise the default values are used.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"removeAllContent":{"!description":"Removes all the controls in the aggregation named <code>content<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation named <code>content<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.core.Control) -> Number","!category":"function"},"setResponsive":{"!description":"Sets a new value for property <code>responsive<\/code>.\n\nIf this property is 'false' all added controls keep their widths. Otherwise all added controls will be extended to the possible width of a row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bResponsive: Boolean) -> sap.ui.layout.ResponsiveFlowLayout","!category":"function"},"removeContent":{"!description":"These function needs to be overridden to prevent any rendering while some\ncontent is still being added.","!type":"fn(oContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function"},"destroyContent":{"!description":"Destroys all the content in the aggregation\nnamed <code>content<\/code>.","!type":"fn() -> sap.ui.layout.ResponsiveFlowLayout","!category":"function"},"!description":"This is a layout where several controls can be added. These controls are blown up to fit a whole line. If the window resizes the controls are moved between the lines and resized again.","insertContent":{"!description":"These function needs to be overridden to prevent any rendering while some\ncontent is still being added.","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number)","!category":"function"},"!category":"class","getResponsive":{"!description":"Gets current value of property <code>responsive<\/code>.\n\nIf this property is 'false' all added controls keep their widths. Otherwise all added controls will be extended to the possible width of a row.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function"},"!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.ResponsiveFlowLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"}},"sap.ui.layout.HorizontalLayout":{"addContent":{"!description":"Adds some content into the aggregation named <code>content<\/code>.","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.HorizontalLayout","!category":"function"},"getContent":{"!description":"Gets content of aggregation <code>content<\/code>.\n\nThe controls inside this layout","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"removeAllContent":{"!description":"Removes all the controls in the aggregation named <code>content<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation named <code>content<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.core.Control) -> Number","!category":"function"},"removeContent":{"!description":"Removes a content from the aggregation named <code>content<\/code>.","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function"},"destroyContent":{"!description":"Destroys all the content in the aggregation\nnamed <code>content<\/code>.","!type":"fn() -> sap.ui.layout.HorizontalLayout","!category":"function"},"!description":"A layout that provides support for horizontal alignment of controls","insertContent":{"!description":"Inserts a content into the aggregation named <code>content<\/code>.","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.HorizontalLayout","!category":"function"},"setAllowWrapping":{"!description":"Sets a new value for property <code>allowWrapping<\/code>.\n\nSpecifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bAllowWrapping: Boolean) -> sap.ui.layout.HorizontalLayout","!category":"function"},"!category":"class","getAllowWrapping":{"!description":"Gets current value of property <code>allowWrapping<\/code>.\n\nSpecifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function"},"!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.HorizontalLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function"}},"sap.ui.layout.Splitter_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.Splitter with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.Splitter"},"sap.ui.layout.form.GridLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridLayout with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.GridLayout"},"sap.ui.layout.ResponsiveFlowLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayout with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","!category":"function"},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.ResponsiveFlowLayout"}},"!name":"sap.ui.layout","mtproduction_maven_plugin_version":"1.2.0"}